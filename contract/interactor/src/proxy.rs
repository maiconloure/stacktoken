// Code generated by the multiversx-sc proxy generator. DO NOT EDIT.

////////////////////////////////////////////////////
////////////////// AUTO-GENERATED //////////////////
////////////////////////////////////////////////////

#![allow(dead_code)]
#![allow(clippy::all)]

use multiversx_sc::proxy_imports::*;

pub struct StackTokenContractProxy;

impl<Env, From, To, Gas> TxProxyTrait<Env, From, To, Gas> for StackTokenContractProxy
where
    Env: TxEnv,
    From: TxFrom<Env>,
    To: TxTo<Env>,
    Gas: TxGas<Env>,
{
    type TxProxyMethods = StackTokenContractProxyMethods<Env, From, To, Gas>;

    fn proxy_methods(self, tx: Tx<Env, From, To, (), Gas, (), ()>) -> Self::TxProxyMethods {
        StackTokenContractProxyMethods { wrapped_tx: tx }
    }
}

pub struct StackTokenContractProxyMethods<Env, From, To, Gas>
where
    Env: TxEnv,
    From: TxFrom<Env>,
    To: TxTo<Env>,
    Gas: TxGas<Env>,
{
    wrapped_tx: Tx<Env, From, To, (), Gas, (), ()>,
}

#[rustfmt::skip]
impl<Env, From, Gas> StackTokenContractProxyMethods<Env, From, (), Gas>
where
    Env: TxEnv,
    Env::Api: VMApi,
    From: TxFrom<Env>,
    Gas: TxGas<Env>,
{
    pub fn init(
        self,
    ) -> TxTypedDeploy<Env, From, NotPayable, Gas, ()> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_deploy()
            .original_result()
    }
}

#[rustfmt::skip]
impl<Env, From, To, Gas> StackTokenContractProxyMethods<Env, From, To, Gas>
where
    Env: TxEnv,
    Env::Api: VMApi,
    From: TxFrom<Env>,
    To: TxTo<Env>,
    Gas: TxGas<Env>,
{
    pub fn post_question<
        Arg0: ProxyArg<ManagedBuffer<Env::Api>>,
        Arg1: ProxyArg<ManagedBuffer<Env::Api>>,
        Arg2: ProxyArg<u64>,
    >(
        self,
        title: Arg0,
        description: Arg1,
        deadline: Arg2,
    ) -> TxTypedCall<Env, From, To, (), Gas, ()> {
        self.wrapped_tx
            .raw_call("postQuestion")
            .argument(&title)
            .argument(&description)
            .argument(&deadline)
            .original_result()
    }

    pub fn submit_answer<
        Arg0: ProxyArg<u64>,
        Arg1: ProxyArg<ManagedBuffer<Env::Api>>,
        Arg2: ProxyArg<ManagedBuffer<Env::Api>>,
    >(
        self,
        question_id: Arg0,
        title: Arg1,
        description: Arg2,
    ) -> TxTypedCall<Env, From, To, NotPayable, Gas, ()> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_call("submitAnswer")
            .argument(&question_id)
            .argument(&title)
            .argument(&description)
            .original_result()
    }

    pub fn approve_answer<
        Arg0: ProxyArg<u64>,
        Arg1: ProxyArg<u64>,
    >(
        self,
        question_id: Arg0,
        answer_id: Arg1,
    ) -> TxTypedCall<Env, From, To, NotPayable, Gas, ()> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_call("approveAnswer")
            .argument(&question_id)
            .argument(&answer_id)
            .original_result()
    }

    pub fn refund_question<
        Arg0: ProxyArg<u64>,
    >(
        self,
        question_id: Arg0,
    ) -> TxTypedCall<Env, From, To, NotPayable, Gas, ()> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_call("refundQuestion")
            .argument(&question_id)
            .original_result()
    }

    pub fn get_all_open_questions(
        self,
    ) -> TxTypedCall<Env, From, To, NotPayable, Gas, MultiValueEncoded<Env::Api, Question<Env::Api>>> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_call("getAllOpenQuestions")
            .original_result()
    }

    pub fn get_question_details<
        Arg0: ProxyArg<u64>,
    >(
        self,
        question_id: Arg0,
    ) -> TxTypedCall<Env, From, To, NotPayable, Gas, OptionalValue<Question<Env::Api>>> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_call("getQuestionDetails")
            .argument(&question_id)
            .original_result()
    }

    pub fn get_answers_for_question<
        Arg0: ProxyArg<u64>,
    >(
        self,
        question_id: Arg0,
    ) -> TxTypedCall<Env, From, To, NotPayable, Gas, MultiValueEncoded<Env::Api, Answer<Env::Api>>> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_call("getAnswersForQuestion")
            .argument(&question_id)
            .original_result()
    }

    pub fn get_questions_by_status<
        Arg0: ProxyArg<QuestionStatus>,
    >(
        self,
        status: Arg0,
    ) -> TxTypedCall<Env, From, To, NotPayable, Gas, MultiValueEncoded<Env::Api, Question<Env::Api>>> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_call("getQuestionsByStatus")
            .argument(&status)
            .original_result()
    }

    pub fn get_expired_questions(
        self,
    ) -> TxTypedCall<Env, From, To, NotPayable, Gas, MultiValueEncoded<Env::Api, Question<Env::Api>>> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_call("getExpiredQuestions")
            .original_result()
    }

    pub fn pause_contract(
        self,
    ) -> TxTypedCall<Env, From, To, NotPayable, Gas, ()> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_call("pauseContract")
            .original_result()
    }

    pub fn unpause_contract(
        self,
    ) -> TxTypedCall<Env, From, To, NotPayable, Gas, ()> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_call("unpauseContract")
            .original_result()
    }

    pub fn transfer_ownership<
        Arg0: ProxyArg<ManagedAddress<Env::Api>>,
    >(
        self,
        new_owner: Arg0,
    ) -> TxTypedCall<Env, From, To, NotPayable, Gas, ()> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_call("transferOwnership")
            .argument(&new_owner)
            .original_result()
    }

    pub fn get_owner(
        self,
    ) -> TxTypedCall<Env, From, To, NotPayable, Gas, ManagedAddress<Env::Api>> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_call("getOwner")
            .original_result()
    }

    pub fn is_contract_paused(
        self,
    ) -> TxTypedCall<Env, From, To, NotPayable, Gas, bool> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_call("isPaused")
            .original_result()
    }

    pub fn get_total_questions(
        self,
    ) -> TxTypedCall<Env, From, To, NotPayable, Gas, u64> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_call("getTotalQuestions")
            .original_result()
    }

    pub fn get_total_answers(
        self,
    ) -> TxTypedCall<Env, From, To, NotPayable, Gas, u64> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_call("getTotalAnswers")
            .original_result()
    }

    pub fn get_contract_stats(
        self,
    ) -> TxTypedCall<Env, From, To, NotPayable, Gas, MultiValue3<u64, u64, bool>> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_call("getContractStats")
            .original_result()
    }
}

#[type_abi]
#[derive(TopEncode, TopDecode, NestedEncode, NestedDecode, Clone)]
pub struct Question<Api>
where
    Api: ManagedTypeApi,
{
    pub question_id: u64,
    pub creator: ManagedAddress<Api>,
    pub title: ManagedBuffer<Api>,
    pub description: ManagedBuffer<Api>,
    pub deadline: u64,
    pub locked_amount: BigUint<Api>,
    pub created_at: u64,
    pub status: QuestionStatus,
    pub approved_answer_id: Option<u64>,
}

#[type_abi]
#[derive(TopEncode, TopDecode, NestedEncode, NestedDecode, Clone, PartialEq, Debug)]
pub enum QuestionStatus {
    Created,
    Answered,
    AnswerApproved,
    Expired,
}

#[type_abi]
#[derive(TopEncode, TopDecode, NestedEncode, NestedDecode, Clone)]
pub struct Answer<Api>
where
    Api: ManagedTypeApi,
{
    pub answer_id: u64,
    pub question_id: u64,
    pub creator: ManagedAddress<Api>,
    pub title: ManagedBuffer<Api>,
    pub description: ManagedBuffer<Api>,
    pub created_at: u64,
    pub votes: u32,
    pub approved_by_creator: bool,
}

#[type_abi]
#[derive(TopEncode, TopDecode, NestedEncode, NestedDecode, Clone)]
pub struct QuestionCreatedEventData<Api>
where
    Api: ManagedTypeApi,
{
    pub deadline: u64,
    pub locked_amount: BigUint<Api>,
}
